{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["aColor","rgb","length","push","Math","round","random","concat","join","InfoCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","cardStyles","width","state","w","closeModal","e","toggleModal","console","log","document","getElementById","offsetWidth","setState","displayModal","react_default","a","createElement","style","objectSpread","styles","card","title","button","onClick","id","content","Component","Slides","_this2","getContent","target","backgroundColor","columnStyles","n","floor","window","innerWidth","total","gutter","margin","gridTemplateColumns","gridAutoRows","gridGap","marginTop","marginBottom","slides","i","key","className","gridColumnEnd","placeSelf","zIndex","border","Modal","_this3","handleScroll","abs","modalTop","pageY","innerHeight","modal","querySelector","height","adjustTop","scrollingElement","scrollTop","top","insertContent","addEventListener","removeEventListener","flexContainer","modalContent","App","_this4","onResize","h","container","App_InfoCard","App_Modal","App_Slides","display","justifyContent","position","padding","alignItems","marginRight","fontWeight","borderRadius","gridAutoFlow","boxShadow","Boolean","location","hostname","match","ReactDOM","render","App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAGMA,SAAS,WAIb,IADA,IAAIC,EAAM,GACHA,EAAIC,OAAS,GAClBD,EAAIE,KAAKC,KAAKC,MAAoB,IAAdD,KAAKE,WAE3B,aAAAC,OAAcN,EAAIO,KAAK,MAAvB,OAGIC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMRQ,WAAa,WACX,MAAO,CACLC,MAAK,GAAAZ,OAAKI,EAAKS,MAAMC,EAAhB,QATUV,EAanBW,WAAa,SAAAC,GACXZ,EAAKD,MAAMc,aAAY,GACvBC,QAAQC,IAAI,UAbZf,EAAKS,MAAQ,CACXC,EAAG,GAHYV,mFAmBjB,IAAIU,EAAIM,SAASC,eAAe,OAAOC,YACvCf,KAAKgB,SAAS,CAACT,uCAIf,OACEP,KAAKJ,MAAMqB,aACXC,EAAAC,EAAAC,cAAA,OAAKC,MAAKvB,OAAAwB,EAAA,EAAAxB,CAAA,GAAMyB,EAAOC,KAASxB,KAAKI,eACnCc,EAAAC,EAAAC,cAAA,MAAIC,MAAOE,EAAOE,OAChBP,EAAAC,EAAAC,cAAA,UAAQC,MAAOE,EAAOG,OAAQC,QAAS3B,KAAKQ,YAA5C,QADF,WAMAU,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,QAAMQ,GAAG,OACV5B,KAAKJ,MAAMiC,WAGhBX,EAAAC,EAAAC,cAAA,OAAKC,MAAKvB,OAAAwB,EAAA,EAAAxB,CAAA,GAAMyB,EAAOC,KAASxB,KAAKI,eACnCc,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,QAAMQ,GAAG,OAAT,mCAxCWE,aAgDjBC,cACJ,SAAAA,EAAYnC,GAAM,IAAAoC,EAAA,OAAAlC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+B,IAChBC,EAAAlC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiC,GAAA5B,KAAAH,KAAMJ,KAyBRqB,aAAe,SAAAR,GACbuB,EAAKpC,MAAMqC,WAAWxB,EAAEyB,OAAOb,MAAMc,iBACrCH,EAAKpC,MAAMc,aAAY,GACvBC,QAAQC,IAAIH,EAAEyB,OAAOb,MAAMc,kBA7BXH,EAgClBI,aAAe,WACb,IAAMC,EAAI/C,KAAKgD,MAAMC,OAAOC,WAAa,KAErCC,EAAQJ,EAAI,IAAM,EAAIA,EAAIA,EAAI,EAAI,EAAIA,EAAI,EAAIA,EAChDK,EAASH,OAAOC,YAAsB,GAARC,GAC9BE,EAAkB,EAATD,EAAa,IACtBrC,GAASkC,OAAOC,WAAcE,GAAUD,EAAQ,GAAME,GAAUF,EAElE,MAAO,CACLG,oBAAmB,UAAAnD,OAAYgD,EAAZ,MAAAhD,OAAsBY,EAAtB,OACnBwC,aAAY,GAAApD,OAAKY,EAAL,MACZyC,QAAO,GAAArD,OAAKiD,EAAL,MACPK,UAAWL,EACXM,aAAcL,IA3ChBX,EAAK1B,MAAQ,CACXuB,QAAS,GACToB,OAAS,WAGP,IADA,IAAIA,EAAS,GACJC,EAAE,EAAIA,EADM,IACEA,IACrBD,EAAO5D,KACL6B,EAAAC,EAAAC,cAAA,UAAQ+B,IAAKD,EACXE,UAAW,QACXzB,QAASK,EAAKf,aACdI,MAAO,CACPc,gBAAiBjD,IACjBmE,cAAe,SACfC,UAAW,UACXC,OAAQ,EACRC,OAAQ,WAId,OAAOP,EAjBA,IAJKjB,wEAkDhB,OACEd,EAAAC,EAAAC,cAAA,OAAKC,MAAKvB,OAAAwB,EAAA,EAAAxB,CAAA,GAAMyB,EAAO0B,OAAWjD,KAAKoC,iBACpCpC,KAAKM,MAAM2C,eArDCnB,aA2Df2B,cACJ,SAAAA,EAAY7D,GAAM,IAAA8D,EAAA,OAAA5D,OAAAC,EAAA,EAAAD,CAAAE,KAAAyD,IAChBC,EAAA5D,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2D,GAAAtD,KAAAH,KAAMJ,KAMR+D,aAAe,SAAAlD,GAGb,GAFWnB,KAAKsE,IAAIF,EAAKpD,MAAMuD,SAAWpD,EAAEqD,OAEV,IAArBvB,OAAOwB,aACjBL,EAAK9D,MAAMqB,aAAe,CAC3B,IAAI+C,EAAQnD,SAASoD,cAAc,UACnCP,EAAK9D,MAAMc,aAAY,GACvBC,QAAQC,IAAIoD,EAAM3C,MAAM6C,UAdVR,EAkBlBS,UAAY,WACV,IAAIN,EAAWhD,SAASuD,iBAAiBC,UACvCL,EAAQnD,SAASoD,cAAc,UAC5BD,GAASA,EAAM3C,MAAMiD,MAAZ,GAAA7E,OAAuBoE,EAAvB,QACZH,EAAK1C,SAAS,CAAC6C,aACfG,EAAM3C,MAAMiD,IAAZ,GAAA7E,OAAqBoE,EAArB,QAvBcH,EA2BlBa,cAAgB,WACd,IAAI1C,EAAUhB,SAASoD,cAAc,YACjCpC,IAAUA,EAAQR,MAAMc,gBAAkBuB,EAAK9D,MAAMiC,UA3BzD6B,EAAKpD,MAAQ,CACXuD,SAAU,GAHIH,mFAiChBnB,OAAOiC,iBAAiB,SAAUxE,KAAK2D,2DAIvC3D,KAAKuE,gBACLvE,KAAKmE,2DAIL5B,OAAOkC,oBAAoB,SAAUzE,KAAK2D,+CAI1C,OACE3D,KAAKJ,MAAMqB,aACTC,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,QAAQwB,UAAU,OAAO/B,MAAKvB,OAAAwB,EAAA,EAAAxB,CAAA,GAAMyB,EAAOmD,cAAkBnD,EAAOyC,QAC1E9C,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,UAAUP,MAAOE,EAAOoD,gBACzB,YAnDG7C,aAwDC8C,cACnB,SAAAA,EAAYhF,GAAO,IAAAiF,EAAA,OAAA/E,OAAAC,EAAA,EAAAD,CAAAE,KAAA4E,IACjBC,EAAA/E,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8E,GAAAzE,KAAAH,KAAMJ,KASRkF,SAAW,SAAArE,GACT,IAAIF,EAAIgC,OAAOC,WAAYuC,EAAIxC,OAAOwB,YACtCc,EAAK7D,SAAS,CAACT,IAAGwE,OAZDF,EAenBnE,YAAc,SAAAO,GACZ4D,EAAK7D,SAAS,CAACC,kBAhBE4D,EAmBnB5C,WAAa,SAAA0C,GACXE,EAAK7D,SAAS,CAAC2D,kBAlBfE,EAAKvE,MAAQ,CACXC,EAAGgC,OAAOC,WACVuC,EAAGxC,OAAOwB,YACV9C,cAAc,EACd0D,aAAc,IANCE,mFAwBjBtC,OAAOiC,iBAAiB,SAAUxE,KAAK8E,yDAIvCvC,OAAOkC,oBAAoB,SAAUzE,KAAK8E,2CAI1C,OACE5D,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,SAASP,MAAOE,EAAOyD,WAE7B9D,EAAAC,EAAAC,cAAC6D,EAAD,CAAUpD,QAAS7B,KAAKM,MAAMqE,aAC5B1D,aAAcjB,KAAKM,MAAMW,aACzBP,YAAaV,KAAKU,cAGpBQ,EAAAC,EAAAC,cAAA,OAAKC,MAAKvB,OAAAwB,EAAA,EAAAxB,CAAA,GAAMyB,EAAOyD,UAAczD,EAAOmD,gBAE1CxD,EAAAC,EAAAC,cAAC8D,EAAD,CAAOrD,QAAS7B,KAAKM,MAAMqE,aACzB1D,aAAcjB,KAAKM,MAAMW,aACzBP,YAAaV,KAAKU,cAEpBQ,EAAAC,EAAAC,cAAC+D,EAAD,CAAQlD,WAAYjC,KAAKiC,WACvBvB,YAAaV,KAAKU,uBAhDGoB,aAwD3BP,EAAS,CAEbyD,UAAW,CACT3E,MAAO,OACR6D,OAAQ,OACPvB,OAAQ,OACRR,gBAAiB,SAGnBuC,cAAe,CACbU,QAAS,OACTC,eAAgB,UAGlB7D,KAAM,CACJ+B,OAAQ,EACR+B,SAAU,SACVhB,IAAK,MACL3B,OAAQ,EACR4C,QAAS,kBACTpD,gBAAiB,SAGnBV,MAAO,CACL2D,QAAS,OACTI,WAAY,UAGd9D,OAAQ,CACN+D,YAAa,QACbF,QAAS,QACTG,WAAY,OACZC,aAAc,MACdxD,gBAAiB,SAGnBc,OAAQ,CACNmC,QAAS,cACTQ,aAAc,MACdrC,OAAQ,GAGVS,MAAO,CACLT,OAAQ,EACRpB,gBAAiB,2BACjB9B,MAAO,OACP6D,OAAQ,QACRoB,SAAU,WACVE,WAAY,SACZK,UAAW,0CAGblB,aAAc,CACZxC,gBAAiB,OACjB9B,MAAO,OACP6D,OAAQ,SCnRQ4B,QACW,cAA7BvD,OAAOwD,SAASC,UAEe,UAA7BzD,OAAOwD,SAASC,UAEhBzD,OAAOwD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjF,EAAAC,EAAAC,cAACgF,EAAD,MAASvF,SAASC,eAAe,SD2H3C,kBAAmBuF,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6a080318.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nconst aColor = () => {\n  //generates random colors in rgb(n, n, n) notation\n  //for dev purposes\n  let rgb = []\n  while (rgb.length < 3) {\n    rgb.push(Math.round(Math.random()*255))\n  }\n  return `rgb(${rgb.join(', ')})`\n}\n\nclass InfoCard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      w: 0,\n    }\n  }\n\n  cardStyles = () => {\n    return {\n      width: `${this.state.w}px`\n    }\n  }\n\n  closeModal = e => {\n    this.props.toggleModal(false)\n    console.log('close')\n  }\n\n  componentDidMount() {\n    let w = document.getElementById('fit').offsetWidth\n    this.setState({w})\n  }\n\n  render() {\n    return (\n      this.props.displayModal ?\n      <div style={{...styles.card, ...this.cardStyles()}}>\n        <h1 style={styles.title} >\n          <button style={styles.button} onClick={this.closeModal}>\n            back\n          </button>\n          a color\n        </h1>\n        <h2><span id=\"fit\">\n          {this.props.content}\n        </span></h2>\n      </div> :\n      <div style={{...styles.card, ...this.cardStyles()}}>\n        <h1>infoPage</h1>\n        <h2><span id=\"fit\">\n          randomlySelectedColors\n        </span></h2>\n      </div>\n    )\n  }\n}\n\nclass Slides extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      content: '',\n      slides: (() => {\n        // pushes n '.slide' divs into 'slides' array\n        let slides = [], n = 100\n        for (let i=0 ; i < n ; i++) {\n          slides.push(\n            <button key={i}\n              className={'slide'}\n              onClick={this.displayModal}\n              style={{\n              backgroundColor: aColor(),\n              gridColumnEnd: 'span 1',\n              placeSelf: 'stretch',\n              zIndex: 1,\n              border: 'none',\n            }}/>\n          )\n        }\n        return slides\n      })(),\n    }\n  }\n\n  displayModal = e => {\n    this.props.getContent(e.target.style.backgroundColor)\n    this.props.toggleModal(true)\n    console.log(e.target.style.backgroundColor)\n  }\n\n  columnStyles = () => {\n    const n = Math.floor(window.innerWidth / 300)\n\n    let total = n % 2 === 0 ? n : n - 1 > 0 ? n - 1 : n,\n      gutter = window.innerWidth / (total * 10),\n      margin = gutter * 2 + 100,\n      width = (window.innerWidth - (gutter * (total - 1)) - margin) / total\n\n    return {\n      gridTemplateColumns: `repeat(${total}, ${width}px)`,\n      gridAutoRows: `${width}px`,\n      gridGap: `${gutter}px`,\n      marginTop: gutter,\n      marginBottom: margin,\n    }\n  }\n\n  render() {\n    return(\n      <div style={{...styles.slides, ...this.columnStyles()}}>\n        {this.state.slides}\n      </div>\n    )\n  }\n}\n\nclass Modal extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      modalTop: 0,\n    }\n  }\n\n  handleScroll = e => {\n    let test = Math.abs(this.state.modalTop - e.pageY)\n\n    if ( test  > window.innerHeight * 0.66\n    && this.props.displayModal ) {\n      let modal = document.querySelector('#modal')\n      this.props.toggleModal(false)\n      console.log(modal.style.height)\n    }\n  }\n\n  adjustTop = () => {\n    let modalTop = document.scrollingElement.scrollTop,\n      modal = document.querySelector('#modal')\n    if ( modal && modal.style.top !== `${modalTop}px`) {\n      this.setState({modalTop})\n      modal.style.top = `${modalTop}px`\n    }\n  }\n\n  insertContent = () => {\n    let content = document.querySelector('#content')\n    if (content) {content.style.backgroundColor = this.props.content}\n  }\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.handleScroll)\n  }\n\n  componentDidUpdate() {\n    this.insertContent()\n    this.adjustTop()\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll)\n  }\n\n  render(){\n    return (\n      this.props.displayModal ?\n        <div id='modal' className='fade' style={{...styles.flexContainer, ...styles.modal}}>\n          <div id='content' style={styles.modalContent}/>\n        </div> : null\n    )\n  }\n}\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      w: window.innerWidth,\n      h: window.innerHeight,\n      displayModal: false,\n      modalContent: '',\n    }\n  }\n\n  onResize = e => {\n    let w = window.innerWidth, h = window.innerHeight\n    this.setState({w, h})\n  }\n\n  toggleModal = displayModal => {\n    this.setState({displayModal})\n  }\n\n  getContent = modalContent => {\n    this.setState({modalContent})\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.onResize)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.onResize)\n  }\n\n  render() {\n    return (\n      <div id='scroll' style={styles.container}>\n\n        <InfoCard content={this.state.modalContent}\n          displayModal={this.state.displayModal}\n          toggleModal={this.toggleModal}\n          />\n\n        <div style={{...styles.container, ...styles.flexContainer}}>\n\n          <Modal content={this.state.modalContent}\n            displayModal={this.state.displayModal}\n            toggleModal={this.toggleModal} />\n\n          <Slides getContent={this.getContent}\n            toggleModal={this.toggleModal} />\n\n        </div>\n      </div>\n    )\n  }\n}\n\nconst styles = {\n\n  container: {\n    width: '90vw',\n  \theight: 'auto',\n    margin: 'auto',\n    backgroundColor: 'white',\n  },\n\n  flexContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n\n  card: {\n    zIndex: 5,\n    position: 'sticky',\n    top: '5vh',\n    margin: 0,\n    padding: '2vw 5vw 2vw 2vw', // top right bottom left\n    backgroundColor: 'white',\n  },\n\n  title: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n\n  button: {\n    marginRight: '1.5vw',\n    padding: '0.2vw',\n    fontWeight: 'bold',\n    borderRadius: '20%',\n    backgroundColor: 'white',\n  },\n\n  slides: {\n    display: 'inline-grid',\n    gridAutoFlow: 'row',\n    zIndex: 0,\n  },\n\n  modal: {\n    zIndex: 3,\n    backgroundColor: 'rgba(255, 255, 255, 0.5)',\n    width: '98vw',\n    height: '100vh',\n    position: 'absolute',\n    alignItems: 'center',\n    boxShadow: '0 0 50vh 50vh rgba(255, 255, 255, 0.5)',\n  },\n\n  modalContent: {\n    backgroundColor: 'blue',\n    width: '90vw',\n    height: '90vh',\n  },\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}