{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["aColor","rgb","length","push","Math","round","random","concat","join","InfoCard","closeModal","e","_this","props","toggleModal","console","log","this","displayModal","react_default","a","createElement","style","styles","card","title","button","onClick","id","content","Component","Slides","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getContent","target","backgroundColor","columnStyles","n","floor","window","innerWidth","total","gutter","margin","width","gridTemplateColumns","gridAutoRows","gridGap","marginTop","marginBottom","state","slides","i","key","className","gridColumnEnd","placeSelf","zIndex","border","objectSpread","Modal","_this3","handleScroll","abs","modalTop","pageY","innerHeight","modal","document","querySelector","height","adjustTop","scrollingElement","scrollTop","top","setState","insertContent","addEventListener","removeEventListener","flexContainer","modalContent","App","_this4","onResize","w","h","container","App_InfoCard","App_Modal","App_Slides","display","justifyContent","position","padding","minWidth","maxWidth","alignItems","marginRight","fontWeight","borderRadius","gridAutoFlow","boxShadow","Boolean","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7238f3c9.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nconst aColor = () => {\n  //generates random colors in rgb(n, n, n) notation\n  //for dev purposes\n  let rgb = []\n  while (rgb.length < 3) {\n    rgb.push(Math.round(Math.random()*255))\n  }\n  return `rgb(${rgb.join(', ')})`\n}\n\nclass InfoCard extends Component {\n\n  closeModal = e => {\n    this.props.toggleModal(false)\n    console.log('close')\n  }\n\n  render() {\n    return (\n      this.props.displayModal ?\n      <div style={styles.card}>\n        <h1 style={styles.title} >\n          <button style={styles.button} onClick={this.closeModal}>\n            back\n          </button>\n          this color is\n        </h1>\n        <h2><span id=\"fit\">\n          {this.props.content}\n        </span></h2>\n      </div> :\n      <div style={styles.card}>\n        <h1>color page</h1>\n        <h2><span id=\"fit\">\n          a temporary field of randomly selected colors\n        </span></h2>\n      </div>\n    )\n  }\n}\n\nclass Slides extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      content: '',\n      slides: (() => {\n        // pushes n '.slide' divs into 'slides' array\n        let slides = [], n = 100\n        for (let i=0 ; i < n ; i++) {\n          slides.push(\n            <button key={i}\n              className={'slide'}\n              onClick={this.displayModal}\n              style={{\n              backgroundColor: aColor(),\n              gridColumnEnd: 'span 1',\n              placeSelf: 'stretch',\n              zIndex: 1,\n              border: 'none',\n            }}/>\n          )\n        }\n        return slides\n      })(),\n    }\n  }\n\n  displayModal = e => {\n    this.props.getContent(e.target.style.backgroundColor)\n    this.props.toggleModal(true)\n    console.log(e.target.style.backgroundColor)\n  }\n\n  columnStyles = () => {\n    const n = Math.floor(window.innerWidth / 300)\n\n    let total = n % 2 === 0 ? n : n - 1 > 0 ? n - 1 : n,\n      gutter = window.innerWidth / (total * 10),\n      margin = gutter * 2 + 100,\n      width = (window.innerWidth - (gutter * (total - 1)) - margin) / total\n\n    return {\n      gridTemplateColumns: `repeat(${total}, ${width}px)`,\n      gridAutoRows: `${width}px`,\n      gridGap: `${gutter}px`,\n      marginTop: gutter,\n      marginBottom: margin,\n    }\n  }\n\n  render() {\n    return(\n      <div style={{...styles.slides, ...this.columnStyles()}}>\n        {this.state.slides}\n      </div>\n    )\n  }\n}\n\nclass Modal extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      modalTop: 0,\n    }\n  }\n\n  handleScroll = e => {\n    let test = Math.abs(this.state.modalTop - e.pageY)\n\n    if ( test  > window.innerHeight * 0.66\n    && this.props.displayModal ) {\n      let modal = document.querySelector('#modal')\n      this.props.toggleModal(false)\n      console.log(modal.style.height)\n    }\n  }\n\n  adjustTop = () => {\n    let modalTop = document.scrollingElement.scrollTop,\n      modal = document.querySelector('#modal')\n    if ( modal && modal.style.top !== `${modalTop}px`) {\n      this.setState({modalTop})\n      modal.style.top = `${modalTop}px`\n    }\n  }\n\n  insertContent = () => {\n    let content = document.querySelector('#content')\n    if (content) {content.style.backgroundColor = this.props.content}\n  }\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.handleScroll)\n  }\n\n  componentDidUpdate() {\n    this.insertContent()\n    this.adjustTop()\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll)\n  }\n\n  render(){\n    return (\n      this.props.displayModal ?\n        <div id='modal' className='fade' style={{...styles.flexContainer, ...styles.modal}}>\n          <div id='content' style={styles.modalContent}/>\n        </div> : null\n    )\n  }\n}\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      w: window.innerWidth,\n      h: window.innerHeight,\n      displayModal: false,\n      modalContent: '',\n    }\n  }\n\n  onResize = e => {\n    let w = window.innerWidth, h = window.innerHeight\n    this.setState({w, h})\n  }\n\n  toggleModal = displayModal => {\n    this.setState({displayModal})\n  }\n\n  getContent = modalContent => {\n    this.setState({modalContent})\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.onResize)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.onResize)\n  }\n\n  render() {\n    return (\n      <div id='scroll' style={styles.container}>\n\n        <InfoCard content={this.state.modalContent}\n          displayModal={this.state.displayModal}\n          toggleModal={this.toggleModal}\n          />\n\n        <div style={{...styles.container, ...styles.flexContainer}}>\n\n          <Modal content={this.state.modalContent}\n            displayModal={this.state.displayModal}\n            toggleModal={this.toggleModal} />\n\n          <Slides getContent={this.getContent}\n            toggleModal={this.toggleModal} />\n\n        </div>\n      </div>\n    )\n  }\n}\n\nconst styles = {\n\n  container: {\n    width: '90vw',\n  \theight: 'auto',\n    margin: 'auto',\n    backgroundColor: 'white',\n  },\n\n  flexContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n\n  card: {\n    zIndex: 5,\n    position: 'sticky',\n    top: '5vh',\n    margin: 0,\n    padding: '2vw 5vw 2vw 2vw', // top right bottom left\n    backgroundColor: 'white',\n    minWidth: '300px',\n    maxWidth: '33vw'\n  },\n\n  title: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n\n  button: {\n    marginRight: '1.5vw',\n    padding: '0.2vw',\n    fontWeight: 'bold',\n    borderRadius: '20%',\n    backgroundColor: 'white',\n  },\n\n  slides: {\n    display: 'inline-grid',\n    gridAutoFlow: 'row',\n    zIndex: 0,\n  },\n\n  modal: {\n    zIndex: 3,\n    backgroundColor: 'rgba(255, 255, 255, 0.5)',\n    width: '98vw',\n    height: '100vh',\n    position: 'absolute',\n    alignItems: 'center',\n    boxShadow: '0 0 50vh 50vh rgba(255, 255, 255, 0.5)',\n  },\n\n  modalContent: {\n    backgroundColor: 'blue',\n    width: '90vw',\n    height: '90vh',\n  },\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}